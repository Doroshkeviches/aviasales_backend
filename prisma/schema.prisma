// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"] // for macOS
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  Admin   @map("admin")
  Client  @map("client")
  Manager @map("manager")
}

enum FlightStatus {
  Planned   @map("planned")
  Flying    @map("flying")
  Fulfilled @map("fulfilled")
  Canceled  @map("canceled")
}

enum TicketStatus {
  Fulfilled @map("fulfilled")
  InCart    @map("in cart")
  Canceled  @map("canceled")
}

enum UserPermissions {
  All                   @map("permissions.all")
  Signout               @map("permissions.signout")
  PasswordChange        @map("permissions.password-change")
  RefreshToken          @map("permissions.refresh-token")
  GetAllUsers           @map("permissions.get-all-users")
  GetUserById           @map("permissions.get-user-by-id")
  GetUsersBySearchQuery @map("permissions.get-users-by-search-query")
  UpdateUser            @map("permissions.update-user")

  GetAllCities        @map("permissions.get-all-cities")
  GetCityById         @map("permissions.get-city-by-id")
  CreateNewCity       @map("permissions.create-new-city")
  UpdateCityTitleById @map("permissions.update-city-title-by-id")
  DeleteCityById      @map("permissions.delete-city-by-id")

  GetArrayOfPath     @map("permissions.get-array-of-path")
  ChangeFlightStatus @map("permissions.change-flight-status")
  ChangeFlightPrice  @map("permissions.change-flight-price")

  GetAllTickets                 @map("permissions.get-all-tickets")
  GetTicketById                 @map("permissions.get-ticket-by-id")
  DeleteTicketById              @map("permissions.delete-ticket-by-id")
  UpdateTicketStatus            @map("permissions.update-ticket-status")
  CreateNewTicket               @map("permissions.create-new-ticket")
  UpdateTicketHolderCredentials @map("permissions.update-ticket-holder-credentials")
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  first_name String
  last_name  String
  role_id    String    @db.Uuid
  role_type  UserRoles
  role       Role      @relation(fields: [role_id, role_type], references: [id, type])
  email      String    @unique
  password   String
  tickets    Ticket[]
  devices    Device[]

  @@index([id])
  @@map("users")
}

model Device {
  id          String   @id @default(uuid()) @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz()
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz()
  user_id     String   @default(uuid()) @db.Uuid
  device_id   String   @default(uuid()) @db.Uuid
  reset_token String?
  user        User?    @relation(fields: [user_id], references: [id])

  @@unique([user_id, device_id])
  @@unique([device_id, reset_token])
  @@map("devices")
}

model Ticket {
  id                String       @id @default(uuid()) @db.Uuid
  holder_first_name String
  holder_last_name  String
  flight            Flight       @relation(fields: [flight_id], references: [id])
  flight_id         String       @db.Uuid
  status            TicketStatus

  user_id String @db.Uuid
  user    User?  @relation(fields: [user_id], references: [id])

  @@index([id])
  @@map("tickets")
}

model Flight {
  id                String       @id @default(uuid()) @db.Uuid
  from_city_id      String       @db.Uuid
  to_city_id        String       @db.Uuid
  from_city         City         @relation(name: "from_city", fields: [from_city_id], references: [id])
  to_city           City         @relation(name: "to_city", fields: [to_city_id], references: [id])
  start_flight_date DateTime     @db.Timestamptz()
  end_flight_date   DateTime     @db.Timestamptz()
  status            FlightStatus
  price             Int
  available_seats   Int
  ticket            Ticket[]
  plane             Plane        @relation(fields: [plane_id], references: [id])
  plane_id          String       @db.Uuid

  @@index([id, from_city_id, to_city_id])
  @@map("flights")
}

model Plane {
  id      String   @id @default(uuid()) @db.Uuid
  title   String
  seats   Int
  flights Flight[]

  @@index([id])
  @@map("planes")
}

model City {
  id                String   @id @default(uuid()) @db.Uuid
  title             String
  flights_from_city Flight[] @relation("from_city")
  flights_to_city   Flight[] @relation("to_city")

  @@index([id])
  @@map("cities")
}

model Role {
  id          String            @id @default(uuid()) @db.Uuid
  type        UserRoles
  users       User[]
  permissions UserPermissions[]

  @@unique([id, type])
  @@map("roles")
}
